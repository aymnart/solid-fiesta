generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

///////////////////////////////////////////////////////////////////////////
/////////////////////////////// User models ///////////////////////////////

enum UserRole {
  ADMIN
  USER
}

model User {
  id                 String    @id @default(uuid())
  name               String?
  email              String?   @unique
  emailVerified      DateTime? @map("email_verified")
  image              String?
  password           String?
  role               UserRole  @default(USER)
  isTwoFactorEnabled Boolean   @default(false)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  // Relations
  accounts              Account[]
  preferences           UserPreference?
  twoFactorConfirmation TwoFactorConfirmation?

  @@index([email])
  @@map("users")
}

model UserPreference {
  id        String   @id @default(uuid())
  userId    String   @unique
  theme     String?
  font      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

model Account {
  id                String   @id @default(uuid())
  userId            String   @map("user_id")
  name              String?
  email             String?
  type              String
  provider          String
  providerAccountId String   @map("provider_account_id")
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  nextDeltaToken    String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

///////////////////////////////////////////////////////////////////////////
/////////////////////////////// Verification models ///////////////////////

model VerificationToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@index([email])
  @@index([expires])
  @@map("verification_tokens")
}

model PasswordResetToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@index([email])
  @@index([expires])
  @@map("password_reset_tokens")
}

model TwoFactorToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@index([email])
  @@index([expires])
  @@map("two_factor_tokens")
}

model TwoFactorConfirmation {
  id      String   @id @default(uuid())
  userId  String   @unique
  expires DateTime

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([expires])
  @@map("two_factor_confirmations")
}

///////////////////////////////////////////////////////////////////////////
/////////////////////////////// Tool models ///////////////////////////////

model Category {
  id          String   @id @default(cuid())
  name        String   @db.Text
  slug        String   @unique
  fullPath    String   @unique @default("")
  label       String?
  description String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Hierarchical relations
  parent        Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  parentId      String?
  subcategories Category[] @relation("CategoryHierarchy")

  // Implicit relation
  tools Tool[]

  // Indexes
  @@index([slug])
  @@index([parentId])
}

model Tool {
  id          String     @id @default(cuid())
  name        String     @db.Text
  description String?    @db.Text
  url         String?
  image       String?
  categories  Category[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
